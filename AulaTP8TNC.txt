# Aula TP8 TNC

sage: # Se Mn = 2^n -1 é primo então n é primo
sage: # d|n então (2^d-1)|(2^n-1)
sage: # p primo, Mp = 2^p-1 é primo de Mersenne se M é primo.
sage:
sage: # Teste de Lucas Lehmer:
sage: # r1 = 4
sage: # rk = r^2(k-1)-2 mod Mp
sage: # Mp é primo se e só se rp = 0 Mod Mp.
sage:
sage: M5 = 2^5-1
sage: Zn = IntegerModRing(M5)
sage: r1 = Zn(4)
sage: r2 = r1^2 - 2
sage: r3 = r2^2 - 2
sage: r4 = r3^2 - 2
sage: r4
0

sage: def Lucas_lehmer(p):
....:     if not is_prime(p):
....:         return False
....:     Zn = IntegerModRing(2^p-1)
....:     r = Zn(4)
....:     for j in range(2,p):
....:         r = r^2-2
....:     return r == 0
....:
sage: Lucas_lehmer(5)
True
sage: Lucas_lehmer(11)
False
sage:

----//----

sage: p = 7
sage: Zp = IntegerModRing(p)
sage: srr = [k for k in Zp if gcd(k,p) == 1]
sage: srr
[1, 2, 3, 4, 5, 6]
sage: a = srr[2]
sage: a
3
sage: a^2
2
sage: a^3
6
sage: [a^i for i in range(1,7)]
[3, 2, 6, 4, 5, 1]

sage: # ordem de um elemento -> mais pequeno expoente que faz com que esse numero seja == 1
sage:
sage: n = 12
sage: Zn = IntegerModRing(n)
sage: srr = [k for k in Zn if gcd(k,n) ==1]
sage: srr
[1, 5, 7, 11]
sage: a = srr[1]
sage: a
5
sage: a^2
1
sage: # não é grupo ciclo, não há nennhum elemento gerador, ou seja, que atravéz dele chega aos restantes
sage:
sage: n = 25
sage: Zn = IntegerModRing(n)
sage: srr = [k for k in Zn if gcd(k,n) == 1]
sage: srr
[1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24]
sage: a = srr[1]
sage: a
2
sage: a^2,a^4,a^5,a^10
(4, 16, 7, 24)
sage: a^20
1
sage: # ordem = 20, 1 <= ord <= 20
sage: [a^i for i in range(1,21)]
[2, 4, 8, 16, 7, 14, 3, 6, 12, 24, 23, 21, 17, 9, 18, 11, 22, 19, 13, 1]
sage:

--//--
sage: n = 28
sage: Zn = IntegerModRing(n)
sage: srr = [k for k in Zn if gcd(k,n) == 1]
sage: srr
[1, 3, 5, 9, 11, 13, 15, 17, 19, 23, 25, 27]
sage: len(srr)
12
sage: a = srr[1]
sage: a^12 == 1 # teorema de euler
True
sage: a^2,a^3,a^4,a^5
(9, 27, 25, 19)
sage:

sage: n = 14
sage: Zn = IntegerModRing(n)
sage: srr = [k for k in Zn if gcd(k,n) == 1]
sage: srr
[1, 3, 5, 9, 11, 13]
sage: a = srr[1]
sage: a^6 == 1
True
sage: a^2,a^3
(9, 13)
sage: [a^k for k in range(1,euler_phi(n)+1)]
[3, 9, 13, 11, 5, 1]

-- Ficha 5
